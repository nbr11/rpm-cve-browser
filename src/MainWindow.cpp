#include "MainWindow.hpp"
#include "ui_MainWindow.h"

#include <QListWidgetItem>
#include <QProcess>
#include <QRegularExpression>
#include <QSignalMapper>
#include <QThread>
#include <QTimer>

#include "PackageListGenerator.hpp"

MainWindow::MainWindow(QWidget *parent)
  : QMainWindow(parent)
    , m_pUi(new Ui::MainWindow)
    , m_pListGenerator(new PackageListGenerator(this))
    , m_pProgressTimer(new QTimer(this))
    , m_progressCount(0)
    , m_progressTick(0)
{
    m_pUi->setupUi(this);

    m_pUi->processingDial->setDisabled(true);
    m_pUi->processingDial->setVisible(false);

    m_pProgressTimer->setInterval(20);
    connect(m_pUi->refreshButton, SIGNAL(clicked(bool)), this, SLOT(regeneratePackageList()));

    connect(this, SIGNAL(startListGenerator()), m_pListGenerator, SLOT(start()));
    connect(m_pListGenerator, SIGNAL(item(QString)), this, SLOT(addListItem(QString)));
    connect(m_pListGenerator, SIGNAL(started()), this, SLOT(packageListGenStarted()));
    connect(m_pListGenerator, SIGNAL(finished()), this, SLOT(packageListGenStopped()));

    connect(m_pUi->packageListWidget, SIGNAL(itemChanged(QListWidgetItem*)), this, SLOT(onItemChanged(QListWidgetItem*)));

    connect(m_pProgressTimer, SIGNAL(timeout()), this, SLOT(updateProgress()));

    regeneratePackageList();
}

MainWindow::~MainWindow()
{
    delete m_pUi;
}

void MainWindow::regeneratePackageList()
{
    m_pUi->packageListWidget->clear();
    emit startListGenerator();
}

void MainWindow::addListItem(QString item)
{
    m_PackageItemsToAdd.append(item);
}

void MainWindow::packageListGenStarted()
{
    incrementProgressCount();
}

void MainWindow::packageListGenStopped()
{
    m_pUi->packageListWidget->addItems(m_PackageItemsToAdd);
    for (int i = 0; i < m_pUi->packageListWidget->count(); i++)
    {
        QListWidgetItem * pItem = m_pUi->packageListWidget->item(i);
        pItem->setFlags(pItem->flags() | Qt::ItemIsUserCheckable);
        pItem->setCheckState(Qt::Unchecked);
    }

    m_pUi->packageListWidget->sortItems(Qt::AscendingOrder);
    m_PackageItemsToAdd.clear();

    decrementProgressCount();
}

void MainWindow::incrementProgressCount()
{
    // If 0 start timer
    if (m_progressCount == 0)
    {
        m_pProgressTimer->start();

        m_pUi->processingDial->setVisible(true);
        m_pUi->processingLabel->setText(tr("Processing ..."));
        m_pUi->refreshButton->setEnabled(false);
    }
    m_progressCount += 1;
}

void MainWindow::decrementProgressCount()
{
    if (m_progressCount > 0)
    {
        m_progressCount -= 1;
    }

    // If count back to 0 stop progress
    if (m_progressCount == 0)
    {
        m_pProgressTimer->stop();

        m_pUi->processingLabel->setText("");

        m_progressTick = 0;
        m_pUi->processingDial->setValue(m_progressTick);
        m_pUi->processingDial->setVisible(false);
        m_pUi->refreshButton->setEnabled(true);
    }
}

void MainWindow::onItemChanged(QListWidgetItem *pItem)
{
    if (pItem->checkState())
    {
        QProcess * pChecksumProcess = new QProcess();

        // connect(&checksumProcess, SIGNAL(started()), this, SLOT(incrementProgressCount()));
        // connect(&checksumProcess, SIGNAL(finished()), this, SLOT(decrementProgressCount()));

        QString prog = "rpm";
        QStringList args;
        args.append("-q");
        args.append("--changelog");
        args.append(pItem->text());

        connect(pChecksumProcess, SIGNAL(finished(int)), this, SLOT(changeLogRetrieved()));

        pChecksumProcess->start(prog, args);

    }
}

void MainWindow::changeLogRetrieved()
{
    QProcess * pProcess = qobject_cast<QProcess *>(QObject::sender());
    if (pProcess)
    {
        QString output = pProcess->readAll();

        QRegularExpression Expression("CVE-\\d{4}-\\d{4,7}");

        QRegularExpressionMatchIterator i = Expression.globalMatch(output);

        qDebug("Arg size:%d", pProcess->arguments().size());

        if (pProcess->arguments().size() >= 3)
        {

            QString packageName = pProcess->arguments()[2];
            while (i.hasNext())
            {
                QRegularExpressionMatch match = i.next();
                QString word = match.captured(0);
                qDebug("Out:%s", word.toUtf8().data());

                int row = m_pUi->tableWidget->rowCount();
                m_pUi->tableWidget->setItem(row, 0, new QTableWidgetItem(packageName));
                m_pUi->tableWidget->setItem(row, 1, new QTableWidgetItem(word));

            }
        }

        // No longer need process so remove at end of event loop
        pProcess->deleteLater();
    }
}

void MainWindow::updateProgress()
{
    m_progressTick += 2;
    m_pUi->processingDial->setValue(m_progressTick);
}

