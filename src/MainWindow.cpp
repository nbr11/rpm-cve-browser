#include "MainWindow.hpp"
#include "ui_MainWindow.h"

#include <QHeaderView>
#include <QListWidgetItem>
#include <QProcess>
#include <QRegularExpression>
#include <QSignalMapper>
#include <QSortFilterProxyModel>
#include <QStandardItemModel>
#include <QThread>
#include <QTimer>

#include "PackageListGenerator.hpp"

MainWindow::MainWindow(QWidget *parent)
  : QMainWindow(parent)
    , m_pUi(new Ui::MainWindow)
    , m_pPackageListModel(new QStandardItemModel(this))
    , m_pCVETableModel(new QStandardItemModel(this))
    , m_pCVEFilter(new QSortFilterProxyModel(this))
    , m_pListGenerator(new PackageListGenerator(this))
    , m_progressCount(0)
{
    m_pUi->setupUi(this);

    QSortFilterProxyModel * pPackageSortFilter = new QSortFilterProxyModel(this);

    pPackageSortFilter->setSourceModel(m_pPackageListModel);
    pPackageSortFilter->sort(0);

    m_pUi->packageListView->setModel(pPackageSortFilter);

    m_pCVEFilter->setSourceModel(m_pCVETableModel);
    m_pCVEFilter->sort(0);

    m_pCVETableModel->setHeaderData(0, Qt::Horizontal , QString("Package Name"));
    m_pCVETableModel->setHeaderData(1, Qt::Horizontal, QString("CVE"));

    m_pUi->cveTableView->horizontalHeader()->setSortIndicatorShown(true);
    m_pUi->cveTableView->horizontalHeader()->setStretchLastSection(true);


    m_pUi->cveTableView->setModel(m_pCVEFilter);

    connect(m_pUi->refreshButton, SIGNAL(clicked(bool)), this, SLOT(regeneratePackageList()));

    connect(this, SIGNAL(startListGenerator()), m_pListGenerator, SLOT(start()));
    connect(m_pListGenerator, SIGNAL(item(QString)), this, SLOT(addListItem(QString)));
    connect(m_pListGenerator, SIGNAL(started()), this, SLOT(packageListGenStarted()));
    connect(m_pListGenerator, SIGNAL(finished()), this, SLOT(packageListGenStopped()));

    connect(m_pPackageListModel, SIGNAL(itemChanged(QStandardItem*)), this, SLOT(onItemChanged(QStandardItem*)));
    connect(m_pUi->filterEdit, SIGNAL(textChanged(QString)), pPackageSortFilter, SLOT(setFilterFixedString(QString)));

    connect(m_pUi->cveTableView, SIGNAL(clicked(QModelIndex)), this, SLOT(itemClicked(QModelIndex)));

    regeneratePackageList();
}

MainWindow::~MainWindow()
{
    delete m_pUi;
}

void MainWindow::regeneratePackageList()
{
    m_pPackageListModel->clear();
    emit startListGenerator();
}

void MainWindow::addListItem(QString item)
{
    m_PackageItemsToAdd.append(item);
}

void MainWindow::packageListGenStarted()
{
    incrementProgressCount();
}

void MainWindow::packageListGenStopped()
{
    Q_FOREACH(QString str, m_PackageItemsToAdd)
    {
        QStandardItem * pItem = new QStandardItem(str);
        pItem->setCheckable(true);
        pItem->setCheckState(Qt::Unchecked);

        m_pPackageListModel->appendRow(pItem);
    }

    connect(m_pUi->cveTableView->horizontalHeader(), SIGNAL(sortIndicatorChanged(int,Qt::SortOrder)), this, SLOT(sortTable(int,Qt::SortOrder)));


    //m_pPackageListModel->setStringList(m_PackageItemsToAdd);

    //m_pUi->packageListWidget->addItems(m_PackageItemsToAdd);
    /*for (int i = 0; i < m_pUi->packageListWidget->count(); i++)
    {
        pItem->setFlags(pItem->flags() | Qt::ItemIsUserCheckable);
        pItem->setCheckState(Qt::Unchecked);

        Item->setCheckable( true );
        Item->setCheckState( Qt::Checked );
    }*/

    m_PackageItemsToAdd.clear();

    decrementProgressCount();
}

void MainWindow::incrementProgressCount()
{
    // When a operation is in progress disable parts of the UI
    if (m_progressCount == 0)
    {
        m_pUi->processingLabel->setText(tr("Processing ..."));
        m_pUi->refreshButton->setDisabled(true);
        m_pUi->filterEdit->setDisabled(true);
    }
    m_progressCount += 1;
}

void MainWindow::decrementProgressCount()
{
    if (m_progressCount > 0)
    {
        m_progressCount -= 1;
    }

    // If all operations are finished re enable the ui
    if (m_progressCount == 0)
    {
        m_pUi->processingLabel->setText("");

        m_pUi->refreshButton->setDisabled(false);
        m_pUi->filterEdit->setDisabled(false);
    }
}

void MainWindow::onItemChanged(QStandardItem *pItem)
{
    if (pItem->checkState())
    {
        QProcess * pChangeLogProcess = new QProcess();

        // connect(&checksumProcess, SIGNAL(started()), this, SLOT(incrementProgressCount()));
        // connect(&checksumProcess, SIGNAL(finished()), this, SLOT(decrementProgressCount()));

        QString prog = "rpm";
        QStringList args;
        args.append("-q");
        args.append("--changelog");
        args.append(pItem->text());

        connect(pChangeLogProcess, SIGNAL(finished(int)), this, SLOT(changeLogRetrieved()));

        pChangeLogProcess->start(prog, args);

    }
    else
    {
        for (int i =0; i < m_pCVETableModel->rowCount(); i++)
        {
            if (m_pCVETableModel->item(i, 0)->data(Qt::DisplayRole).toString() == pItem->text())
            {
                m_pCVETableModel->removeRow(i);
                // Decrement counter as row has been removed
                i--;
            }
        }
    }
}

void MainWindow::changeLogRetrieved()
{
    QProcess * pProcess = qobject_cast<QProcess *>(QObject::sender());
    if (pProcess)
    {
        QString output = pProcess->readAll();

        QRegularExpression Expression("CVE-\\d{4}-\\d{4,7}");

        QRegularExpressionMatchIterator i = Expression.globalMatch(output);

        qDebug("Arg size:%d", pProcess->arguments().size());

        if (pProcess->arguments().size() >= 3)
        {

            QString packageName = pProcess->arguments()[2];
            while (i.hasNext())
            {
                QRegularExpressionMatch match = i.next();
                QString word = match.captured(0);
                qDebug("Out:%s", word.toUtf8().data());

                QStandardItem * pNameItem = new QStandardItem(packageName);
                QStandardItem * pCVEItem = new QStandardItem(word);

                QList<QStandardItem *> ItemList;
                ItemList.append(pNameItem);
                ItemList.append(pCVEItem);

                m_pCVETableModel->appendRow(ItemList);

            }
        }

        // No longer need process so remove at end of event loop
        pProcess->deleteLater();
    }
}

void MainWindow::sortTable(int column, Qt::SortOrder order)
{
    m_pCVEFilter->sort(column, order);
}

void MainWindow::itemClicked(const QModelIndex &Index)
{
    int row = Index.row();

    // Use the row to look up the package name and CVE
    QString Package = m_pCVEFilter->index(row, 0).data().toString();
    QString CVE     = m_pCVEFilter->index(row, 1).data().toString();

    m_pUi->cveView->setUrl(QString("http://www.suse.com/security/cve/%1.html").arg(CVE));

    // look up package info

    QProcess * pRPMInfoProcess = new QProcess();

    // connect(&checksumProcess, SIGNAL(started()), this, SLOT(incrementProgressCount()));
    // connect(&checksumProcess, SIGNAL(finished()), this, SLOT(decrementProgressCount()));

    QString prog = "rpm";
    QStringList args;
    args.append("-qi");
    args.append(Package);

    connect(pRPMInfoProcess, SIGNAL(finished(int)), this, SLOT(packageInfoRetrieved()));

    pRPMInfoProcess->start(prog, args);
}

void MainWindow::packageInfoRetrieved()
{
    QProcess * pProcess = qobject_cast<QProcess *>(QObject::sender());
    if (pProcess)
    {
        QString output = pProcess->readAll();
        m_pUi->packageDetailsTextEdit->setPlainText(output);
    }
    else
    {
        m_pUi->packageDetailsTextEdit->clear();
    }
}
