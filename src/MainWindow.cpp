#include "MainWindow.hpp"
#include "ui_MainWindow.h"

#include "PackageListGenerator.hpp"

#include <QThread>
#include <QTimer>


MainWindow::MainWindow(QWidget *parent)
  : QMainWindow(parent)
    , m_pUi(new Ui::MainWindow)
    , m_pListGenerator(new PackageListGenerator())
    , m_pPackageListThread(new QThread(this))
    , m_pProgressTimer(new QTimer(this))
    , m_progressCount(0)
    , m_progressTick(0)
{
    m_pUi->setupUi(this);

    m_pUi->processingDial->setDisabled(true);

    m_pProgressTimer->setInterval(20);

    m_pListGenerator->moveToThread(m_pPackageListThread);

    m_pPackageListThread->start();

    connect(m_pUi->refreshButton, SIGNAL(clicked(bool)), this, SLOT(regeneratePackageList()));

    connect(this, SIGNAL(startListGenerator()), m_pListGenerator, SLOT(start()));
    connect(m_pListGenerator, SIGNAL(item(QString)), this, SLOT(addListItem(QString)));
    connect(m_pListGenerator, SIGNAL(started()), this, SLOT(incrementProgressCount()));
    connect(m_pListGenerator, SIGNAL(finished()), this, SLOT(decrementProgressCount()));

    connect(m_pProgressTimer, SIGNAL(timeout()), this, SLOT(updateProgress()));

    regeneratePackageList();
}

MainWindow::~MainWindow()
{
    m_pPackageListThread->quit();

    delete m_pListGenerator;
    delete m_pUi;
}

void MainWindow::regeneratePackageList()
{
    m_pUi->packageListWidget->clear();
    emit startListGenerator();
}

void MainWindow::addListItem(QString item)
{
    QListWidgetItem* pListItem = new QListWidgetItem(item, m_pUi->packageListWidget);
    pListItem->setFlags(pListItem->flags() | Qt::ItemIsUserCheckable); // set checkable flag
    pListItem->setCheckState(Qt::Unchecked); // AND initialize check state

    m_pUi->packageListWidget->addItem(pListItem);
}

void MainWindow::incrementProgressCount()
{
    // If 0 start timer
    if (m_progressCount == 0)
    {
        m_pProgressTimer->start();

        m_pUi->processingLabel->setText(tr("Processing ..."));
        m_pUi->refreshButton->setEnabled(false);
    }
    m_progressCount += 1;
}

void MainWindow::decrementProgressCount()
{
    if (m_progressCount > 0)
    {
        m_progressCount -= 1;
    }

    // If count back to 0 stop progress
    if (m_progressCount == 0)
    {
        m_pProgressTimer->stop();

        m_pUi->processingLabel->setText("");

        m_progressTick = 0;
        m_pUi->processingDial->setValue(m_progressTick);

        m_pUi->refreshButton->setEnabled(true);


        m_pUi->packageListWidget->sortItems(Qt::AscendingOrder);

    }
}

void MainWindow::updateProgress()
{
    m_progressTick += 2;
    m_pUi->processingDial->setValue(m_progressTick);
}

